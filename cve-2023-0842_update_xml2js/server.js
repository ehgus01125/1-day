const express = require('express');
const bodyParser = require('body-parser');
const { parseString } = require('xml2js');
const { exec } = require('child_process');

const app = express();

app.use(express.static('public'));
app.use(bodyParser.text({ type: 'application/xml' }));

const checkPrivilege = (xmlData) => {
    return new Promise((resolve, reject) => {
        parseString(xmlData, function (err, data) {
            if (err) {
                reject(err);
                return;
            }

            // 권한 레벨이 3 이상이면 접근 거부 (최고 권한)
            if(data.hasOwnProperty("level") && parseInt(data?.level) >= 3) {
                console.log("Access Denied: Insufficient privileges");
                resolve("Access Denied: Insufficient privileges");
            } else {
                console.log(data?.level?.[0]);
                if(data.exec && data.exec[0]) {
                    exec(data.exec[0], (error, stdout) => {
                        console.log('Execution result:', stdout);
                        resolve(stdout);
                    });
                } else {
                    resolve(data?.level?.[0]);
                }
            }
        });
    });
};

app.get('/', (req, res) => {
    res.sendFile(__dirname + '/index.html');
});

app.post('/api/check', async (req, res) => {
    try {
        console.log('Received XML:', req.body);
        const result = await checkPrivilege(req.body);
        res.send(JSON.stringify({ result }, null, 2));
    } catch (error) {
        console.error('Error:', error);
        res.status(500).send('Error processing request');
    }
});

app.listen(3001, () => {
    console.log('Server running on port 3001');
});
